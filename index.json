{
  "api/index.html": {
    "href": "api/index.html",
    "title": "PLACEHOLDER | Gaze Interaction System",
    "keywords": "PLACEHOLDER TODO: Add .NET projects to the src folder and run docfx to generate REAL API Documentation!"
  },
  "api/TS.GazeInteraction.GazeInteractable.html": {
    "href": "api/TS.GazeInteraction.GazeInteractable.html",
    "title": "Class GazeInteractable | Gaze Interaction System",
    "keywords": "Class GazeInteractable Represents an interactable object that responds to gaze-based interactions. Inheritance System.Object GazeInteractable Namespace: TS.GazeInteraction Assembly: .dll Syntax public class GazeInteractable : MonoBehaviour Fields | Improve this Doc View Source OnGazeActivated Declaration public UnityEvent OnGazeActivated Field Value Type Description UnityEvent | Improve this Doc View Source OnGazeEnter Declaration public UnityEvent OnGazeEnter Field Value Type Description UnityEvent | Improve this Doc View Source OnGazeExit Declaration public UnityEvent OnGazeExit Field Value Type Description UnityEvent | Improve this Doc View Source OnGazeStay Declaration public UnityEvent OnGazeStay Field Value Type Description UnityEvent | Improve this Doc View Source OnGazeToggle Declaration public UnityEvent<bool> OnGazeToggle Field Value Type Description UnityEvent<bool> Properties | Improve this Doc View Source IsActivable Indicates whether the interactable is activable. Declaration public bool IsActivable { get; } Property Value Type Description bool | Improve this Doc View Source IsActivated Indicates whether the interactable is currenlty activated. Declaration public bool IsActivated { get; } Property Value Type Description bool | Improve this Doc View Source IsEnabled Indicates whether the interactable is enabled. Declaration public bool IsEnabled { get; set; } Property Value Type Description bool Methods | Improve this Doc View Source Activate() Activates the interactable and invokes the activated event. Declaration public void Activate() | Improve this Doc View Source Enable(bool) Enables or disables the interactable game object. Declaration public void Enable(bool enable) Parameters Type Name Description bool enable True to enable, false to disable. | Improve this Doc View Source GazeEnter(GazeInteractor, Vector3) Invokes the gaze enter event. Declaration public void GazeEnter(GazeInteractor interactor, Vector3 point) Parameters Type Name Description GazeInteractor interactor Vector3 point | Improve this Doc View Source GazeExit(GazeInteractor) Invokes the gaze exit event after the _exitDelay duration. Declaration public void GazeExit(GazeInteractor interactor) Parameters Type Name Description GazeInteractor interactor | Improve this Doc View Source GazeStay(GazeInteractor, Vector3) Invokes the gaze stay event. Declaration public void GazeStay(GazeInteractor interactor, Vector3 point) Parameters Type Name Description GazeInteractor interactor Vector3 point Events | Improve this Doc View Source Activated Event triggered when the interactable is activated. Declaration public event GazeInteractable.OnActivated Activated Event Type Type Description GazeInteractable.OnActivated | Improve this Doc View Source Enter Event triggered when the gaze enters the interactable. Declaration public event GazeInteractable.OnEnter Enter Event Type Type Description GazeInteractable.OnEnter | Improve this Doc View Source Exit Event triggered when the gaze exits the interactable. Declaration public event GazeInteractable.OnExit Exit Event Type Type Description GazeInteractable.OnExit | Improve this Doc View Source Stay Event triggered while the gaze remains on the interactable. Declaration public event GazeInteractable.OnStay Stay Event Type Type Description GazeInteractable.OnStay"
  },
  "api/TS.GazeInteraction.GazeInteractable.OnActivated.html": {
    "href": "api/TS.GazeInteraction.GazeInteractable.OnActivated.html",
    "title": "Delegate GazeInteractable.OnActivated | Gaze Interaction System",
    "keywords": "Delegate GazeInteractable.OnActivated Delegate for handling the activation event. Namespace: TS.GazeInteraction Assembly: .dll Syntax public delegate void GazeInteractable.OnActivated(GazeInteractable interactable) Parameters Type Name Description GazeInteractable interactable The interactable object."
  },
  "api/TS.GazeInteraction.GazeInteractable.OnEnter.html": {
    "href": "api/TS.GazeInteraction.GazeInteractable.OnEnter.html",
    "title": "Delegate GazeInteractable.OnEnter | Gaze Interaction System",
    "keywords": "Delegate GazeInteractable.OnEnter Delegate for handling the gaze enter event. Namespace: TS.GazeInteraction Assembly: .dll Syntax public delegate void GazeInteractable.OnEnter(GazeInteractable interactable, GazeInteractor interactor, Vector3 point) Parameters Type Name Description GazeInteractable interactable The interactable object. GazeInteractor interactor The gaze interactor. Vector3 point The point where the gaze entered."
  },
  "api/TS.GazeInteraction.GazeInteractable.OnExit.html": {
    "href": "api/TS.GazeInteraction.GazeInteractable.OnExit.html",
    "title": "Delegate GazeInteractable.OnExit | Gaze Interaction System",
    "keywords": "Delegate GazeInteractable.OnExit Delegate for handling the gaze exit event. Namespace: TS.GazeInteraction Assembly: .dll Syntax public delegate void GazeInteractable.OnExit(GazeInteractable interactable, GazeInteractor interactor) Parameters Type Name Description GazeInteractable interactable The interactable object. GazeInteractor interactor The gaze interactor."
  },
  "api/TS.GazeInteraction.GazeInteractable.OnStay.html": {
    "href": "api/TS.GazeInteraction.GazeInteractable.OnStay.html",
    "title": "Delegate GazeInteractable.OnStay | Gaze Interaction System",
    "keywords": "Delegate GazeInteractable.OnStay Delegate for handling the gaze stay event. Namespace: TS.GazeInteraction Assembly: .dll Syntax public delegate void GazeInteractable.OnStay(GazeInteractable interactable, GazeInteractor interactor, Vector3 point) Parameters Type Name Description GazeInteractable interactable The interactable object. GazeInteractor interactor The gaze interactor. Vector3 point The current gaze point."
  },
  "api/TS.GazeInteraction.GazeInteractor.html": {
    "href": "api/TS.GazeInteraction.GazeInteractor.html",
    "title": "Class GazeInteractor | Gaze Interaction System",
    "keywords": "Class GazeInteractor Manages gaze-based interactions with interactables. Inheritance System.Object GazeInteractor Namespace: TS.GazeInteraction Assembly: .dll Syntax public class GazeInteractor : MonoBehaviour"
  },
  "api/TS.GazeInteraction.GazeReticle.html": {
    "href": "api/TS.GazeInteraction.GazeReticle.html",
    "title": "Class GazeReticle | Gaze Interaction System",
    "keywords": "Class GazeReticle Visual representation of the point of interaction. Inheritance System.Object GazeReticle Namespace: TS.GazeInteraction Assembly: .dll Syntax public class GazeReticle : MonoBehaviour Methods | Improve this Doc View Source Enable(bool) Toggles the visibility of the reticle GameObject. Declaration public void Enable(bool enable) Parameters Type Name Description bool enable Whether to enable or disable the reticle. | Improve this Doc View Source SetInteractor(GazeInteractor) Assigns the GazeInteractor using this reticle. Declaration public void SetInteractor(GazeInteractor interactor) Parameters Type Name Description GazeInteractor interactor The GazeInteractor to associate with this reticle. | Improve this Doc View Source SetProgress(float) Updates the progress visual indicator. Declaration public void SetProgress(float progress) Parameters Type Name Description float progress The progress value (0 to 1) to display. | Improve this Doc View Source SetTarget(RaycastHit) Assigns the current hit point to adjust the reticle position and rotation. Declaration public void SetTarget(RaycastHit hit) Parameters Type Name Description RaycastHit hit The RaycastHit containing information about the hit point. | Improve this Doc View Source SetType(ReticleType) Sets the type of reticle (visible or invisible). Declaration public void SetType(ReticleType type) Parameters Type Name Description ReticleType type The desired reticle type."
  },
  "api/TS.GazeInteraction.html": {
    "href": "api/TS.GazeInteraction.html",
    "title": "Namespace TS.GazeInteraction | Gaze Interaction System",
    "keywords": "Namespace TS.GazeInteraction Classes GazeInteractable Represents an interactable object that responds to gaze-based interactions. GazeInteractor Manages gaze-based interactions with interactables. GazeReticle Visual representation of the point of interaction. ResourcesManager Loads assets from the Resources directory. Enums ReticleType Types of reticles (visual feedback) for gaze interactions. Delegates GazeInteractable.OnActivated Delegate for handling the activation event. GazeInteractable.OnEnter Delegate for handling the gaze enter event. GazeInteractable.OnExit Delegate for handling the gaze exit event. GazeInteractable.OnStay Delegate for handling the gaze stay event."
  },
  "api/TS.GazeInteraction.ResourcesManager.html": {
    "href": "api/TS.GazeInteraction.ResourcesManager.html",
    "title": "Class ResourcesManager | Gaze Interaction System",
    "keywords": "Class ResourcesManager Loads assets from the Resources directory. Inheritance System.Object ResourcesManager Namespace: TS.GazeInteraction Assembly: .dll Syntax public class ResourcesManager : MonoBehaviour Fields | Improve this Doc View Source FILE_PREFAB_RETICLE Declaration public const string FILE_PREFAB_RETICLE = \"gaze_reticle\" Field Value Type Description string Methods | Improve this Doc View Source GetPrefab(string) Loads and returns the asset specified in file from the Resources directory. Declaration public static GameObject GetPrefab(string file) Parameters Type Name Description string file Name of the asset to load. Use one of the constants. Returns Type Description GameObject Returns the loaded GameObject."
  },
  "api/TS.GazeInteraction.ReticleType.html": {
    "href": "api/TS.GazeInteraction.ReticleType.html",
    "title": "Enum ReticleType | Gaze Interaction System",
    "keywords": "Enum ReticleType Types of reticles (visual feedback) for gaze interactions. Namespace: TS.GazeInteraction Assembly: .dll Syntax public enum ReticleType Fields Name Description Default Visible only on detection. Invisible Always invisible. Visible Always visible."
  },
  "docs/getting-started.html": {
    "href": "docs/getting-started.html",
    "title": "Getting Started | Gaze Interaction System",
    "keywords": "Getting Started"
  },
  "docs/introduction.html": {
    "href": "docs/introduction.html",
    "title": "Introduction | Gaze Interaction System",
    "keywords": "Introduction"
  },
  "index.html": {
    "href": "index.html",
    "title": "Gaze Interaction System | Gaze Interaction System",
    "keywords": "Gaze Interaction System The Gaze Interaction system is based on the same approach used in the Unity XR Interaction Toolkit. Core Components The system is built on two main components: GazeInteractor: Component attached to the Main Camera that sends out rays to detect GazeInteractables. GazeInteractable: Component attached to objects in the scene for the user to interact with. When the Gaze Interactor detects a Gaze Interactable, it triggers interaction events. Setting Up the System Where to download Unity Asset Store GitHub How to setup the GazeInteractor In the Hierarchy window, create a new empty GameObject as a child of your main camera. Add the GazeInteractor script to this new GameObject. You can find this script in the inspector window by searching for \"GazeInteractor\". How to setup GazeInteractables Attach the GazeInteractable script to any object in your scene that you want the user to be able to interact with by looking at it. In the inspector window, you can define what happens when the user looks at the object for a certain amount of time (dwell time) or clicks on it (optional). This basic setup allows users to interact with objects simply by looking at them. Customization Both the GazeInteractor and GazeInteractable scripts have many options you can use to customize their behavior. How to customize the GazeInteractor _maxDetectionDistance: This property defines the maximum distance from the camera at which the GazeInteractor can detect Gaze Interactable objects. Users looking at objects beyond this distance will not trigger interaction. _minDetectionDistance: This property defines the minimum distance from the camera at which the GazeInteractor can detect Gaze Interactable objects. Users looking at objects closer than this distance will not trigger interaction. _timeToActivate: This property sets the dwell time required for the Gaze Interaction System to register a successful activation. Users must look at a Gaze Interactable object for this duration (in seconds) before it triggers the activation event. _layerMask: This property defines a layer mask that restricts which objects in the scene the GazeInteractor's raycast can collide with. Only objects included in the selected layers will be considered Gaze Interactables. _reticleType: This property determines the type of reticle (visual feedback) displayed to indicate where the user is looking. The available options are defined by the ReticleType enumeration within the code. How to customize the GazeInteractables _isActivable: This property determines whether the GazeInteractable object can be activated through gaze interaction. If set to false, users looking at the object will not trigger the OnGazeActivated event. _exitDelay: This property defines a time delay (in seconds) before the OnGazeExit event is triggered after the user's gaze moves away from the GazeInteractable object. This allows for a smoother user experience when transitioning focus between objects. OnGazeEnter: This UnityEvent is triggered when the user's gaze initially focuses on a GazeInteractable object. You can use this event to perform actions like highlighting the object or playing a sound effect. OnGazeStay: This UnityEvent is triggered repeatedly while the user's gaze remains focused on a GazeInteractable object. This is typically used for actions that require sustained focus, such as charging up an attack. OnGazeExit: This UnityEvent is triggered after the user's gaze moves away from a GazeInteractable object, following the delay defined by _exitDelay. You can use this event to reset the object's state or perform cleanup actions. OnGazeActivated: This UnityEvent is triggered when the user's gaze remains focused on a GazeInteractable object for the duration specified by _timeToActivate (dwell time) and the object is set to be activable (_isActivable is true). This is the core interaction event for the system. OnGazeToggle: This UnityEvent is triggered whenever the state of gaze interaction with the object toggles (e.g., from gaze enter to gaze exit or vice versa). It provides a boolean argument indicating the current gaze state (true for gaze enter/stay, false for gaze exit). You can use this event for more complex interaction logic. For a more in-depth explanation, check out this video. All feedback and contributions are more than welcome."
  }
}